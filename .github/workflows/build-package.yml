
name: Build and Package

on:
  workflow_call:
    inputs:
      icloudpd_version:
        required: true
        type: string

jobs:

  build_src:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Dev dependencies
      run: |
        pip3 install --disable-pip-version-check -e .[dev]

    - name: Build Python Wheel
      run: |
        scripts/build

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: icloudpd-${{ github.sha }}-src
        if-no-files-found: error
        path: |
          dist/icloud*.whl

  build_linux_1:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        BUILD_PROP:
        # https://doc.rust-lang.org/nightly/rustc/platform-support.html
          - [
              "amd64", # docker plat
              "x86_64-unknown-linux-gnu", # rust triplet
              "amd64", # internal file suffix
              "x86_64", # pip file suffix
          ]
          - [
              "arm64",
              "aarch64-unknown-linux-gnu",
              "arm64", # file suffix
              "aarch64", # pip file suffix
          ]
          - [
              "386",
              "i686-unknown-linux-gnu",
              "386", # file suffix
              "i686", # pip file suffix
          ]
          - [
              "arm/v7",
              "armv7-unknown-linux-gnueabihf",
              "arm32v7", # file suffix
              "armv7l", # pip file suffix
          ]
          # - [
          #     "arm/v6",
          #     "arm-unknown-linux-gnueabi",
          #     "arm32v6", # file suffix
          #     "armv6", # pip file suffix
          # ]
          # - [
          #     "arm/v5",
          #     "arm-unknown-linux-gnueabi",
          #     "arm32v5", # file suffix
              # "armv5", # pip file suffix
          # ]
    # env:
    #   PLATFORM: ${{ matrix.BUILD_PROP[0] }}
    #   TOOLCHAIN_NAME: ${{ matrix.BUILD_PROP[1] }}
    #   SUFFIX: ${{ matrix.BUILD_PROP[2] }}
    
    name: Build Linux Binary for "${{ matrix.BUILD_PROP[0] }}" with Debian
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v3

    - name: Set up QEMU
      if: matrix.BUILD_PROP[0] != 'amd64' && matrix.BUILD_PROP[0] != '386'
      uses: docker/setup-qemu-action@v2

    # for sha256:fe60359c92e86a43cc87b3d906006245f77bfc0565676b80004cc666e4feb9f0 image
    # fails in staticx with "ldd: exited with unknown exit code (139)"
    # - name: Set up QEMU
    #   if: matrix.BUILD_PROP[0] != 'amd64' && matrix.BUILD_PROP[0] != '386'
    #   run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Build Linux for ${{ matrix.BUILD_PROP[0] }}
      uses: addnab/docker-run-action@v3
      with:
        image: python:3.12
        shell: bash
        options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.BUILD_PROP[0] }}
        run: >
          echo "install os pkgs..." &&
          export DEBIAN_FRONTEND=noninteractive && apt-get update -y && apt-get install -y patchelf musl-tools build-essential libssl-dev libffi-dev python3-dev &&
          echo "install rustup..."  &&
          (curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-host ${{ matrix.BUILD_PROP[1] }}) &&
          . "$HOME/.cargo/env" &&
          echo "create venv and active..." &&
          cd /work &&
          python3 -m venv .venv &&
          . .venv/bin/activate &&
          echo "install deps..." &&
          pip3 install --disable-pip-version-check -e .[dev,devlinux] &&
          echo "install staticx..." &&
          BOOTLOADER_CC=musl-gcc pip3 install --disable-pip-version-check https://files.pythonhosted.org/packages/69/a7/993fa7a40179d36b328a212cf061a43876055ee3568e478e76aa7793ceb5/staticx-0.14.1.tar.gz &&
          echo "build binary..." &&
          scripts/build_bin_linux ${{inputs.icloudpd_version}} ${{ matrix.BUILD_PROP[2] }} &&
          echo "convert to static binary..." && 
          scripts/build_bin_linux_static ${{inputs.icloudpd_version}} ${{ matrix.BUILD_PROP[2] }} && 
          echo "build binary dist..." &&
          scripts/build_binary_dist_linux ${{inputs.icloudpd_version}} ${{ matrix.BUILD_PROP[2] }} &&
          echo "add musl to binary dist..." &&
          scripts/build_binary_dist_linux_add_musl ${{ matrix.BUILD_PROP[3] }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: icloudpd-${{github.sha}}-bin-linux-1
        if-no-files-found: error
        path: |
          dist/icloud*

  build_linux_2:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        BUILD_PROP:
        # https://doc.rust-lang.org/nightly/rustc/platform-support.html
          # - [
          #     "amd64", # docker plat
          #     "x86_64-unknown-linux-gnu", # rust triplet
          #     "amd64", # internal file suffix
          #     "x86_64", # pip file suffix
          # ]
          # - [
          #     "arm64",
          #     "aarch64-unknown-linux-gnu",
          #     "arm64", # file suffix
          #     "aarch64", # pip file suffix
          # ]
          # - [
          #     "386",
          #     "i686-unknown-linux-gnu",
          #     "386", # file suffix
          #     "i686", # pip file suffix
          # ]
          # - [
          #     "arm/v7",
          #     "armv7-unknown-linux-gnueabihf",
          #     "arm32v7", # file suffix
          #     "armv7l", # pip file suffix
          # ]
          - [
              "arm/v6",
              "arm-unknown-linux-gnueabi",
              "arm32v6", # file suffix
              "armv6", # pip file suffix
          ]
          # - [
          #     "arm/v5",
          #     "arm-unknown-linux-gnueabi",
          #     "arm32v5", # file suffix
          #     "armv5", # pip file suffix
          # ]
    # env:
    #   PLATFORM: ${{ matrix.BUILD_PROP[0] }}
    #   TOOLCHAIN_NAME: ${{ matrix.BUILD_PROP[1] }}
    #   SUFFIX: ${{ matrix.BUILD_PROP[2] }}
    
    name: Build Linux Binary for "${{ matrix.BUILD_PROP[0] }}" with Alpine
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v3

    - name: Set up QEMU
      if: matrix.BUILD_PROP[0] != 'amd64' && matrix.BUILD_PROP[0] != '386'
      uses: docker/setup-qemu-action@v2

    # for sha256:fe60359c92e86a43cc87b3d906006245f77bfc0565676b80004cc666e4feb9f0 image
    # fails in staticx with "ldd: exited with unknown exit code (139)"
    # - name: Set up QEMU
    #   if: matrix.BUILD_PROP[0] != 'amd64' && matrix.BUILD_PROP[0] != '386'
    #   run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Build Linux for ${{ matrix.BUILD_PROP[0] }} ALPINE
      uses: addnab/docker-run-action@v3
      with:
        image: python:3.12-alpine3.18
        shell: sh
        options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.BUILD_PROP[0] }}
        run: >
          echo "Install pkgs..." &&
          apk update &&
          apk add git curl binutils gcc libc-dev libffi-dev cargo zlib-dev openssl-dev tzdata bash patchelf &&
          echo "create venv and active..." &&
          cd /work &&
          python3 -m venv .venv &&
          . .venv/bin/activate &&
          echo "install deps..." &&
          pip3 install --disable-pip-version-check -e .[dev,devlinux] &&
          echo "build binary..." &&
          scripts/build_bin_linux ${{inputs.icloudpd_version}} ${{ matrix.BUILD_PROP[2] }} &&
          echo "build binary dist..." &&
          scripts/build_binary_dist_linux ${{inputs.icloudpd_version}} ${{ matrix.BUILD_PROP[2] }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: icloudpd-${{github.sha}}-bin-linux-2
        if-no-files-found: error
        path: |
          dist/icloud*

  build_macos:
    # earliest possible mac for better compatibility
    runs-on: macos-11
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Dev dependencies
      run: |
        pip3 install --disable-pip-version-check -e .[dev]

    - name: Build Release Executables
      run: |
        scripts/build_bin_macos ${{inputs.icloudpd_version}} amd64

    - name: Build Python Binary Wheel
      run: |
        scripts/build_binary_dist_macos ${{inputs.icloudpd_version}}

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: icloudpd-${{github.sha}}-bin-macos
        if-no-files-found: error
        path: |
          dist/icloud*

  build_windows:
    # earliest possible mac for better compatibility
    runs-on: windows-2019
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Dev dependencies
      run: |
        pip3 install --disable-pip-version-check -e .[dev]

    - name: Build Release Executables
      run: |
        scripts/build_bin_windows ${{inputs.icloudpd_version}} amd64

    - name: Build Python Binary Wheel
      run: |
        scripts/build_binary_dist_windows ${{inputs.icloudpd_version}}

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: icloudpd-${{github.sha}}-bin-windows
        if-no-files-found: error
        path: |
          dist/icloud*

  build_docker:
    runs-on: ubuntu-22.04
    needs: [ build_linux_1, build_linux_2 ]

    steps:
    - uses: actions/checkout@v3

    - name: Download artifacts 1
      uses: actions/download-artifact@v3 
      with: 
        name: icloudpd-${{github.sha}}-bin-linux-1
        path: | 
          dist 
 
    - name: Download artifacts 2
      uses: actions/download-artifact@v3 
      with: 
        name: icloudpd-${{github.sha}}-bin-linux-2
        path: | 
          dist 
 
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        version: v0.12.0

    - name: Build Release Docker
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64,linux/386,linux/arm/v7,linux/arm/v6 #,linux/arm/v5
        push: false
        outputs: type=oci,dest=dist/icloudpd-${{inputs.icloudpd_version}}-oci.tar
        load: false  # load into docker 
        # tags: | 
        #   icloudpd/icloudpd:latest 
        #   icloudpd/icloudpd:${{inputs.icloudpd_version}} 
        #   icloudpd/icloudpd:commit-${{ github.sha }} 
 
    - name: Upload artifacts 
      uses: actions/upload-artifact@v3 
      with: 
        name: icloudpd-${{github.sha}}-oci 
        if-no-files-found: error 
        path: | 
          dist/icloud*.tar

  build_npm:
    runs-on: ubuntu-22.04
    needs: [build_linux_1,build_macos,build_windows]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Download artifacts (Linux)
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-bin-linux-1
          path: |
            dist

      - name: Download artifacts (MacOS)
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-bin-macos
          path: |
            dist

      - name: Download artifacts (Windows)
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-bin-windows
          path: |
            dist

      - name: Build Package
        run: |
          scripts/build_npm ${{inputs.icloudpd_version}}

      - name: Upload artifacts 
        uses: actions/upload-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-npm
          if-no-files-found: error 
          path: | 
            dist/npm/

  compatibility_linux_pip_apt:
    name: "PIP on ${{ matrix.image[1] }} on linux/${{ matrix.prop[1] }} platform APT"
    strategy: 
      fail-fast: false
      matrix:
        image: 
          - [ 
            "python3_12", #variant name
            "python:3.12", #image
            ] 
          # apt-get does not work for debian 6 anymore
          # - [ 
          #   "debian_6_squeeze", #variant name
          #   "debian:squeeze", #image
          #   ] 
          # apt-get does not work for debian 7 anymore
          # - [ 
          #   "debian_7_wheezy", #variant name
          #   "debian:wheezy", #image
          #   ] 
          # apt-get does not work for debian 8 anymore
          # - [ 
          #   "debian_8_jessie", #variant name
          #   "debian:jessie", #image
          #   ] 
          # apt-get does not work for debian 7 anymore
          # - [ 
          #   "debian_9_stretch", #variant name
          #   "debian:stretch", #image
          #   ] 
          - [ 
            "debian_10_buster", #variant name
            "debian:buster", #image
            ] 
          - [ 
            "debian_11_bullseye", #variant name
            "debian:bullseye", #image
            ] 
          - [ 
            "debian_12_bookworm", #variant name
            "debian:bookworm", #image
            ] 
          # apt-get does not work for ubuntu 12 anymore
          # - [ 
          #   "ubuntu_12_precise", #variant name
          #   "ubuntu:precise", #image
          #   ] 
          # apt-get does not work have venv for ubuntu 14 -- TBD
          # - [ 
          #   "ubuntu_14_trusty", #variant name
          #   "ubuntu:trusty", #image
          #   ] 
          - [ 
            "ubuntu_16_xenial", #variant name
            "ubuntu:xenial", #image
            ] 
          - [ 
            "ubuntu_18_bionic", #variant name
            "ubuntu:bionic", #image
            ] 
          - [ 
            "ubuntu_20_focal", #variant name
            "ubuntu:focal", #image
            ] 
          - [ 
            "ubuntu_22_jammy", #variant name
            "ubuntu:jammy", #image
            ] 
        prop: 
          - [
            "amd64",  # variant name
            "amd64",  # platform spec
            "",  # image prefix
          ]
          - [
            "386",  # variant name
            "386",  # platform spec
            "i386/",  # image prefix
          ]
          - [
            "arm64",  # variant name
            "arm64",  # platform spec
            "",  # image prefix
          ]
          - [
            "arm32v7",  # variant name
            "arm/v7",  # platform spec
            "arm32v7/",  # image prefix
          ]
          - [
            "arm32v6",  # variant name
            "arm/v6",  # platform spec
            "arm32v6/",  # image prefix
          ]
          # - [
          #   "arm32v5",  # variant name
          #   "arm/v5",  # platform spec
          #   "arm32v5/",  # image prefix
          # ]
    runs-on: ubuntu-22.04
    needs: [ build_linux_1, build_linux_2, build_src ]
    defaults:
      run:
        shell: bash

    steps:

      - name: Get image
        id: get_image 
        run: | 
          echo digest=$(docker pull --platform linux/${{ matrix.prop[1] }} ${{ matrix.prop[2] }}${{ matrix.image[1] }} | grep Digest | head -n 1 | cut -d: -f 2-3 | tr -d ' ') >> $GITHUB_OUTPUT
 
      - name: Make folder for compatibility
        if: steps.get_image.outputs.digest != '' 
        run: |
          mkdir compatibility

      - name: Download artifacts (src)
        if: steps.get_image.outputs.digest != '' 
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-src
          path: |
            dist

      - name: Download artifacts (bin 1)
        if: steps.get_image.outputs.digest != '' 
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-bin-linux-1
          path: |
            dist

      - name: Download artifacts (bin 2)
        if: steps.get_image.outputs.digest != '' 
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-bin-linux-2
          path: |
            dist

      # fails with "icloud: Failed to stat /proc/self/exe: Bad file descriptor" in bookwork arm64
      # - name: Set up QEMU
      #   if: matrix.prop[1] != 'amd64' && matrix.prop[1] != '386'
      #   uses: docker/setup-qemu-action@v2

      - name: Set up QEMU
        if: steps.get_image.outputs.digest != '' && matrix.prop[1] != 'amd64' && matrix.prop[1] != '386'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Run test for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }}
        if: steps.get_image.outputs.digest != '' 
        id: run_test
        uses: addnab/docker-run-action@v3
        continue-on-error: true
        with:
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }}
          shell: bash
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }}
          run: >
            echo "install default python..." &&
            export DEBIAN_FRONTEND=noninteractive && apt-get update -y && apt-get install -y python3 python3-venv &&
            echo "create venv and active..." &&
            cd /work &&
            python3 -m venv .venv &&
            . .venv/bin/activate &&
            echo "install icloudpd..." &&
            pip3 install --disable-pip-version-check --no-index --find-links /work/dist icloudpd==${{inputs.icloudpd_version}} &&
            echo "test icloud..." &&
            icloud -h &&
            echo "test icloudpd..." &&
            icloudpd --version &&
            echo "check if src..." &&
            (pip3 list --disable-pip-version-check | grep keyring | head -n 1 > /work/compatibility/pip.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass)

          # touch /work/compatibility/pip.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass

      - name: Record failure for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }}
        if: ${{ steps.run_test.outcome == 'failure' }} 
        run: |
          touch compatibility/pip.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail

      - name: Upload compatibility result
        if: steps.get_image.outputs.digest != '' 
        uses: actions/upload-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-compatibility-linux-pip-apt
          if-no-files-found: error
          path: |
            compatibility/*

  compatibility_linux_pip_apk:
    name: "PIP on ${{ matrix.image[1] }} on linux/${{ matrix.prop[1] }} platform APK"
    strategy: 
      fail-fast: false
      matrix:
        image: 
          - [ 
            "python3_12_alpine3_18", #variant name
            "python:3.12-alpine3.18", #image
            ] 
          - [ 
            "alpine_3_19", #variant name
            "alpine:3.19", #image
            ] 
          - [ 
            "alpine_3_18", #variant name
            "alpine:3.18", #image
            ] 
          - [ 
            "alpine_3_17", #variant name
            "alpine:3.17", #image
            ] 
          - [ 
            "alpine_3_16", #variant name
            "alpine:3.16", #image
            ] 
          - [ 
            "alpine_3_15", #variant name
            "alpine:3.15", #image
            ] 
          - [ 
            "alpine_3_14", #variant name
            "alpine:3.14", #image
            ] 
          - [ 
            "alpine_3_13", #variant name
            "alpine:3.13", #image
            ] 
          # - [ 
          #   "alpine_3_12", #variant name
          #   "alpine:3.12", #image
          #   ] 
          # - [ 
          #   "alpine_3_11", #variant name
          #   "alpine:3.11", #image
          #   ] 
          # - [ 
          #   "alpine_3_10", #variant name
          #   "alpine:3.10", #image
          #   ] 
        prop: 
          - [
            "amd64",  # variant name
            "amd64",  # platform spec
            "",  # image prefix
          ]
          - [
            "386",  # variant name
            "386",  # platform spec
            "i386/",  # image prefix
          ]
          - [
            "arm64",  # variant name
            "arm64",  # platform spec
            "",  # image prefix
          ]
          - [
            "arm32v7",  # variant name
            "arm/v7",  # platform spec
            "arm32v7/",  # image prefix
          ]
          - [
            "arm32v6",  # variant name
            "arm/v6",  # platform spec
            "arm32v6/",  # image prefix
          ]
          # - [
          #   "arm32v5",  # variant name
          #   "arm/v5",  # platform spec
          #   "arm32v5/",  # image prefix
          # ]
    runs-on: ubuntu-22.04
    needs: [ build_linux_1, build_linux_2, build_src ]
    defaults:
      run:
        shell: bash

    steps:

      - name: Get image
        id: get_image 
        run: | 
          echo digest=$(docker pull --platform linux/${{ matrix.prop[1] }} ${{ matrix.prop[2] }}${{ matrix.image[1] }} | grep Digest | head -n 1 | cut -d: -f 2-3 | tr -d ' ') >> $GITHUB_OUTPUT

      - name: Make folder for compatibility
        if: steps.get_image.outputs.digest != '' 
        run: |
          mkdir compatibility

      - name: Download artifacts (src)
        if: steps.get_image.outputs.digest != '' 
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-src
          path: |
            dist

      - name: Download artifacts (linux 1)
        if: steps.get_image.outputs.digest != '' 
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-bin-linux-1
          path: |
            dist

      - name: Download artifacts (linux 2)
        if: steps.get_image.outputs.digest != '' 
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-bin-linux-2
          path: |
            dist

      # - name: Set up QEMU
      #   if: matrix.prop[1] != 'amd64' && matrix.prop[1] != '386'
      #   uses: docker/setup-qemu-action@v2

      - name: Set up QEMU
        if: steps.get_image.outputs.digest != '' && matrix.prop[1] != 'amd64' && matrix.prop[1] != '386'
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Run test for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }}
        if: steps.get_image.outputs.digest != '' 
        id: run_test
        uses: addnab/docker-run-action@v3
        continue-on-error: true
        with:
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }}
          shell: sh
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }}
          run: >
            echo "install default python..." &&
            apk update && apk add python3 &&
            echo "create venv and active..." &&
            cd /work &&
            python3 -m venv .venv &&
            . .venv/bin/activate &&
            echo "install icloudpd..." &&
            pip3 install --disable-pip-version-check --no-index --find-links /work/dist icloudpd==${{inputs.icloudpd_version}} &&
            echo "test icloud..." &&
            icloud -h &&
            echo "test icloudpd..." &&
            icloudpd --version &&
            echo "check if src..." &&
            (pip3 list --disable-pip-version-check | grep keyring | head -n 1 > /work/compatibility/pip.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass)
          # touch /work/compatibility/pip.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass

      - name: Record failure for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }}
        if: ${{ steps.run_test.outcome == 'failure' }} 
        run: |
          touch compatibility/pip.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail

      - name: Upload compatibility result
        if: steps.get_image.outputs.digest != '' 
        uses: actions/upload-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-compatibility-linux-pip-apk
          if-no-files-found: error
          path: |
            compatibility/*

  compatibility_nonlinux_pip:
    name: "PIP on ${{ matrix.os }} on amd64 platform"
    strategy: 
      fail-fast: false
      matrix: 
        os: [ macos-11, macos-12, windows-2019, windows-2022 ]
    runs-on: ${{ matrix.os }}
    needs: [ build_macos, build_windows, build_src ]

    steps:

      - name: Make folder for compatibility
        run: |
          mkdir compatibility

      - name: Download artifacts (src)
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-src
          path: |
            dist

      - name: Download artifacts (macos)
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-bin-macos
          path: |
            dist

      - name: Download artifacts (windows)
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-bin-windows
          path: |
            dist

      - name: Run test for ${{ matrix.os }} on amd64
        id: run_test
        continue-on-error: true
        run: >
          pip3 install --disable-pip-version-check --no-index --find-links dist icloudpd==${{inputs.icloudpd_version}} &&
          icloud --help &&
          icloudpd --version &&
          touch compatibility/pip.${{ matrix.os }}.amd64.pass

        # &&
        # echo "check if src..."  &&
        # pip3 list --disable-pip-version-check | grep keyring | head -n 1 > compatibility/pip.${{ matrix.os }}.amd64.pass

      - name: Record failure for ${{ matrix.os }} on amd64
        if: ${{ steps.run_test.outcome == 'failure' }} 
        run: |
          touch compatibility/pip.${{ matrix.os }}.amd64.fail

      - name: Upload compatibility result
        uses: actions/upload-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-compatibility-nonlinux-pip
          if-no-files-found: error
          path: |
            compatibility/*

  compatibility_linux_bin: 
    name: "BIN on ${{ matrix.image[1] }} on linux/${{ matrix.prop[1] }} platform" 
    strategy:  
      fail-fast: false 
      matrix: 
        image:  
          - [ 
            "alpine_3_19", #variant name
            "alpine:3.19", #image
            ] 
          - [ 
            "alpine_3_18", #variant name
            "alpine:3.18", #image
            ] 
          - [ 
            "alpine_3_17", #variant name
            "alpine:3.17", #image
            ] 
          - [ 
            "alpine_3_16", #variant name
            "alpine:3.16", #image
            ] 
          - [ 
            "alpine_3_15", #variant name
            "alpine:3.15", #image
            ] 
          - [ 
            "alpine_3_14", #variant name
            "alpine:3.14", #image
            ] 
          - [ 
            "alpine_3_13", #variant name
            "alpine:3.13", #image
            ] 
          - [ 
            "alpine_3_12", #variant name
            "alpine:3.12", #image
            ] 
          - [ 
            "alpine_3_11", #variant name
            "alpine:3.11", #image
            ] 
          - [ 
            "alpine_3_10", #variant name
            "alpine:3.10", #image
            ] 
          - [  
            "debian_6_squeeze", #variant name 
            "debian:squeeze", #image 
            ]  
          - [  
            "debian_7_wheezy", #variant name 
            "debian:wheezy", #image 
            ]  
          - [  
            "debian_8_jessie", #variant name 
            "debian:jessie", #image 
            ]  
          - [  
            "debian_9_stretch", #variant name 
            "debian:stretch", #image 
            ]  
          - [  
            "debian_10_buster", #variant name 
            "debian:buster", #image 
            ]  
          - [  
            "debian_11_bullseye", #variant name 
            "debian:bullseye", #image 
            ]  
          - [  
            "debian_12_bookworm", #variant name 
            "debian:bookworm", #image 
            ]  
          - [  
            "ubuntu_12_precise", #variant name 
            "ubuntu:precise", #image 
            ]  
          - [  
            "ubuntu_14_trusty", #variant name 
            "ubuntu:trusty", #image 
            ]  
          - [  
            "ubuntu_16_xenial", #variant name 
            "ubuntu:xenial", #image 
            ]  
          - [  
            "ubuntu_18_bionic", #variant name 
            "ubuntu:bionic", #image 
            ]  
          - [  
            "ubuntu_20_focal", #variant name 
            "ubuntu:focal", #image 
            ]  
          - [  
            "ubuntu_22_jammy", #variant name 
            "ubuntu:jammy", #image 
            ]  
        prop:  
          - [ 
            "amd64",  # variant name 
            "amd64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "386",  # variant name 
            "386",  # platform spec 
            "i386/",  # image prefix 
          ] 
          - [ 
            "arm64",  # variant name 
            "arm64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm32v7",  # variant name 
            "arm/v7",  # platform spec 
            "arm32v7/",  # image prefix 
          ] 
          - [ 
            "arm32v6",  # variant name 
            "arm/v6",  # platform spec 
            "arm32v6/",  # image prefix 
          ] 
          # - [ 
          #   "arm32v5",  # variant name 
          #   "arm/v5",  # platform spec 
          #   "arm32v5/",  # image prefix 
          # ] 
    runs-on: ubuntu-22.04 
    needs: [ build_linux_1, build_linux_2 ] 
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Get image 
        id: get_image  
        run: |  
          echo digest=$(docker pull --platform linux/${{ matrix.prop[1] }} ${{ matrix.prop[2] }}${{ matrix.image[1] }} | grep Digest | head -n 1 | cut -d: -f 2-3 | tr -d ' ') >> $GITHUB_OUTPUT 
  
      - name: Make folder for compatibility 
        if: steps.get_image.outputs.digest != ''  
        run: | 
          mkdir compatibility 
 
      - name: Download artifacts 1
        if: steps.get_image.outputs.digest != ''  
        uses: actions/download-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-bin-linux-1
          path: | 
            dist 
 
      - name: Download artifacts 2
        if: steps.get_image.outputs.digest != ''  
        uses: actions/download-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-bin-linux-2
          path: | 
            dist 
 
      # fails with "icloud: Failed to stat /proc/self/exe: Bad file descriptor" in bookwork arm64 
      # - name: Set up QEMU 
      #   if: matrix.prop[1] != 'amd64' && matrix.prop[1] != '386' 
      #   uses: docker/setup-qemu-action@v2 
 
      - name: Set up QEMU 
        if: steps.get_image.outputs.digest != '' && matrix.prop[1] != 'amd64' && matrix.prop[1] != '386' 
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes 
 
      - name: Run test for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_test 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: sh 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "prep test..." && 
            cd /work && 
            chmod +x dist/icloud-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} && 
            chmod +x dist/icloudpd-ex-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} && 
            echo "test icloud..." && 
            dist/icloud-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} -h && 
            echo "test icloudpd..." && 
            dist/icloudpd-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} --version && 
            echo "test icloudpd-ex..." && 
            dist/icloudpd-ex-${{inputs.icloudpd_version}}-linux-${{ matrix.prop[0] }} --help && 
            touch /work/compatibility/bin.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 
 
      - name: Record failure for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/bin.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
 
      - name: Upload compatibility result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-compatibility-linux-bin
          if-no-files-found: error 
          path: | 
            compatibility/* 
 
  compatibility_macos_bin: 
    name: "BIN on ${{ matrix.prop[0] }} on amd64 platform" 
    strategy:  
      fail-fast: false 
      matrix:  
        prop:  
          - [ 
            "macos-11", # GH os 
            "macos",    # file suffix 
            ] 
          - [ 
            "macos-12", 
            "macos", 
            ] 
 
    runs-on: ${{ matrix.prop[0] }} 
    needs: [ build_macos ] 
 
    steps: 
 
      - name: Make folder for compatibility 
        run: | 
          mkdir compatibility 
 
      - name: Download artifacts 
        uses: actions/download-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-bin-macos
          path: | 
            dist 
 
      - name: Run test for ${{ matrix.prop[0] }} on amd64 
        id: run_test 
        continue-on-error: true 
        run: > 
          echo "prep test..." && 
          chmod +x dist/icloud-${{inputs.icloudpd_version}}-${{ matrix.prop[1] }}-amd64 && 
          chmod +x dist/icloudpd-${{inputs.icloudpd_version}}-${{ matrix.prop[1] }}-amd64 && 
          chmod +x dist/icloudpd-ex-${{inputs.icloudpd_version}}-${{ matrix.prop[1] }}-amd64 && 
          echo "test icloud..." && 
          dist/icloud-${{inputs.icloudpd_version}}-${{ matrix.prop[1] }}-amd64 --help && 
          echo "test icloudpd..." && 
          dist/icloudpd-${{inputs.icloudpd_version}}-${{ matrix.prop[1] }}-amd64 --version && 
          echo "test icloudpd-ex..." && 
          dist/icloudpd-ex-${{inputs.icloudpd_version}}-${{ matrix.prop[1] }}-amd64 --help && 
          touch compatibility/bin.${{ matrix.prop[0] }}.amd64.pass 
 
      - name: Record failure for ${{ matrix.prop[0] }} on amd64 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/pip.${{ matrix.prop[0] }}.amd64.fail 
 
      - name: Upload compatibility result 
        uses: actions/upload-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-compatibility-macos-bin 
          if-no-files-found: error 
          path: | 
            compatibility/* 
 
  compatibility_windows_bin: 
    name: "BIN on ${{ matrix.prop[0] }} on amd64 platform" 
    strategy:  
      fail-fast: false 
      matrix:  
        prop:  
          - [ 
            "windows-2019", # GH os 
            "windows", # file suffix 
            ] 
          - [ 
            "windows-2022", 
            "windows", 
            ] 
 
    runs-on: ${{ matrix.prop[0] }} 
    needs: [ build_windows ] 
 
    steps: 
 
      - name: Make folder for compatibility 
        run: | 
          mkdir compatibility 
 
      - name: Download artifacts 
        uses: actions/download-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-bin-windows 
          path: | 
            dist 
 
      - name: Run test for ${{ matrix.prop[0] }} on amd64 
        id: run_test 
        continue-on-error: true 
        run: > 
          echo "test icloud..." && 
          dist/icloud-${{inputs.icloudpd_version}}-${{ matrix.prop[1] }}-amd64.exe --help && 
          echo "test icloudpd..." && 
          dist/icloudpd-${{inputs.icloudpd_version}}-${{ matrix.prop[1] }}-amd64.exe --version && 
          echo "test icloudpd-ex..." && 
          dist/icloudpd-ex-${{inputs.icloudpd_version}}-${{ matrix.prop[1] }}-amd64.exe --help && 
          touch compatibility/bin.${{ matrix.prop[0] }}.amd64.pass 
 
      - name: Record failure for ${{ matrix.prop[0] }} on amd64 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/pip.${{ matrix.prop[0] }}.amd64.fail 
 
      - name: Upload compatibility result 
        uses: actions/upload-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-compatibility-windows-bin 
          if-no-files-found: error 
          path: | 
            compatibility/* 

  compatibility_docker: 
    name: "DOCKER on ${{ matrix.image[1] }} on linux/${{ matrix.prop[1] }} platform" 
    strategy:  
      fail-fast: false 
      matrix: 
        image:  
          - [  
            "linux", #variant name 
            "", #image 
            ]  
        prop:  
          - [ 
            "amd64",  # variant name 
            "amd64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "386",  # variant name 
            "386",  # platform spec 
            "i386/",  # image prefix 
          ] 
          - [ 
            "arm64",  # variant name 
            "arm64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm32v7",  # variant name 
            "arm/v7",  # platform spec 
            "arm32v7/",  # image prefix 
          ] 
          - [ 
            "arm32v6",  # variant name 
            "arm/v6",  # platform spec 
            "arm32v6/",  # image prefix 
          ] 
          # - [ 
          #   "arm32v5",  # variant name 
          #   "arm/v5",  # platform spec 
          #   "arm32v5/",  # image prefix 
          # ] 
    runs-on: ubuntu-22.04 
    needs: [ build_docker ] 
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Install JQ
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Setup config 
        shell: bash 
        run: >
          sudo mkdir -p /etc/docker &&
          sudo touch /etc/docker/daemon.json &&
          (cat /etc/docker/daemon.json | jq --arg registry 172.17.0.1:5000 '."insecure-registries" += [$registry]' | sudo tee /etc/docker/daemon.json)

      - name: Reload Docker 
        id: reload_docker
        continue-on-error: true 
        shell: bash 
        run: >
           sudo systemctl daemon-reload &&
           sudo systemctl restart docker

      - name: Journal for Docker
        if: steps.reload_docker.outcome == 'failure'
        shell: bash
        run: journalctl -xeu docker.service

      - name: Start Registry 
        if: steps.reload_docker.outcome != 'failure'
        shell: bash 
        run: docker run -d -p 5000:5000 registry:2 
 
      - name: Download artifacts 
        if: steps.reload_docker.outcome != 'failure'
        uses: actions/download-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-oci
          path: | 
            dist 
 
      - name: Make folder for compatibility 
        if: steps.reload_docker.outcome != 'failure'
        run: | 
          mkdir compatibility 
 
      - name: Run skopeo 
        if: steps.reload_docker.outcome != 'failure'
        uses: addnab/docker-run-action@v3 
        with: 
          image: quay.io/skopeo/stable:v1.14.0 
          shell: sh 
          options: -v ${{ github.workspace }}/dist:/dist 
          run: > 
            (skopeo copy --preserve-digests --dest-tls-verify=false --all oci-archive:/dist/icloudpd-${{inputs.icloudpd_version}}-oci.tar docker://172.17.0.1:5000/icloudpd/icloudpd:commit-${{ github.sha }}) &&
            (skopeo copy --preserve-digests --src-tls-verify=false --dest-tls-verify=false --all docker://172.17.0.1:5000/icloudpd/icloudpd:commit-${{ github.sha }} docker://172.17.0.1:5000/icloudpd/icloudpd:latest)
  
      # - name: Set up QEMU 
      #   if: matrix.prop[1] != 'amd64' && matrix.prop[1] != '386' 
      #   uses: docker/setup-qemu-action@v2 
 
      - name: Set up QEMU 
        if: steps.reload_docker.outcome != 'failure' && matrix.prop[1] != 'amd64' && matrix.prop[1] != '386' 
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes 
 
      - name: Run test on ${{ matrix.prop[1] }} 
        if: steps.reload_docker.outcome != 'failure'
        id: run_test 
        continue-on-error: true 
        run: >
          (docker run --rm -i --platform linux/${{ matrix.prop[1] }} 172.17.0.1:5000/icloudpd/icloudpd:commit-${{ github.sha }} --help) &&
          (docker run --rm -i --platform linux/${{ matrix.prop[1] }} 172.17.0.1:5000/icloudpd/icloudpd:latest --help)
 
      - name: Record success on ${{ matrix.prop[1] }} 
        if: steps.reload_docker.outcome != 'failure' && steps.run_test.outcome != 'failure'
        run: | 
          touch compatibility/docker.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 
 
      - name: Record failure on ${{ matrix.prop[1] }} 
        if: steps.run_test.outcome == 'failure'
        run: | 
          touch compatibility/docker.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
 
      - name: Upload compatibility result 
        if: steps.reload_docker.outcome != 'failure'
        uses: actions/upload-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-compatibility-docker 
          if-no-files-found: error 
          path: | 
            compatibility/* 
  
  compatibility_linux_npm_apt: 
    name: "NPM on ${{ matrix.image[1] }} on linux/${{ matrix.prop[1] }} platform APT" 
    strategy:  
      fail-fast: false 
      matrix: 
        image:  
          # apt-get does not work for debian 6 anymore
          # - [ 
          #   "debian_6_squeeze", #variant name
          #   "debian:squeeze", #image
          #   ] 
          # apt-get does not work for debian 7 anymore
          # - [ 
          #   "debian_7_wheezy", #variant name
          #   "debian:wheezy", #image
          #   ] 
          # apt-get does not work for debian 8 anymore
          # - [ 
          #   "debian_8_jessie", #variant name
          #   "debian:jessie", #image
          #   ] 
          # apt-get does not work for debian 9 anymore
          # - [ 
          #   "debian_9_stretch", #variant name
          #   "debian:stretch", #image
          #   ] 
          - [ 
            "debian_10_buster", #variant name
            "debian:buster", #image
            ] 
          - [ 
            "debian_11_bullseye", #variant name
            "debian:bullseye", #image
            ] 
          - [ 
            "debian_12_bookworm", #variant name
            "debian:bookworm", #image
            ] 
          - [ 
            "ubuntu_12_precise", #variant name
            "ubuntu:precise", #image
            ] 
          - [ 
            "ubuntu_14_trusty", #variant name
            "ubuntu:trusty", #image
            ] 
          - [ 
            "ubuntu_16_xenial", #variant name
            "ubuntu:xenial", #image
            ] 
          - [ 
            "ubuntu_18_bionic", #variant name
            "ubuntu:bionic", #image
            ] 
          - [ 
            "ubuntu_20_focal", #variant name
            "ubuntu:focal", #image
            ] 
          - [ 
            "ubuntu_22_jammy", #variant name
            "ubuntu:jammy", #image
            ] 
        prop:  
          - [ 
            "amd64",  # variant name 
            "amd64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "386",  # variant name 
            "386",  # platform spec 
            "i386/",  # image prefix 
          ] 
          - [ 
            "arm64",  # variant name 
            "arm64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "arm32v7",  # variant name 
            "arm/v7",  # platform spec 
            "arm32v7/",  # image prefix 
          ] 
          - [ 
            "arm32v6",  # variant name 
            "arm/v6",  # platform spec 
            "arm32v6/",  # image prefix 
          ] 
          # - [ 
          #   "arm32v5",  # variant name 
          #   "arm/v5",  # platform spec 
          #   "arm32v5/",  # image prefix 
          # ] 
    runs-on: ubuntu-22.04 
    needs: [ build_npm ] 
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Create Config
        run: |
          touch ${{ github.workspace }}/npm_config.yaml
          echo "
          storage: /verdaccio/storage/data
          max_body_size: 1000mb
          packages:
            '**':
              access: \$anonymous
              publish: \$anonymous" > ${{ github.workspace }}/npm_config.yaml
          sudo chown 10001:65533 ${{ github.workspace }}/npm_config.yaml
          cat ${{ github.workspace }}/npm_config.yaml

      - name: Start Registry 
        shell: bash 
        run: docker run -d -p 4873:4873 -e VERDACCIO_PORT=4873 -v ${{ github.workspace }}/npm_config.yaml:/verdaccio/conf/config.yaml:ro verdaccio/verdaccio:5

      - name: Get image 
        id: get_image  
        run: |  
          echo digest=$(docker pull --platform linux/${{ matrix.prop[1] }} ${{ matrix.prop[2] }}${{ matrix.image[1] }} | grep Digest | head -n 1 | cut -d: -f 2-3 | tr -d ' ') >> $GITHUB_OUTPUT 

      - name: Make folder for compatibility 
        if: steps.get_image.outputs.digest != ''  
        run: | 
          mkdir compatibility 
 
      - name: Download artifacts
        if: steps.get_image.outputs.digest != ''  
        uses: actions/download-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-npm
          path: | 
            dist/npm 
 
      # - name: Test Registry 
      #   if: steps.get_image.outputs.digest != ''  
      #   shell: bash 
      #   run: |
      #     echo "docker ps..."
      #     docker ps
      #     echo "repo get..."
      #     curl -v http://localhost:4873

      - name: Setup Node
        if: steps.get_image.outputs.digest != ''  
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'http://localhost:4873'

      - name: Publish NPM
        if: steps.get_image.outputs.digest != ''  
        run: |
          npm publish dist/npm/@icloudpd/linux-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/win32-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/icloudpd --access public --registry http://localhost:4873
        env:
          NODE_AUTH_TOKEN: "fake"

      - name: Set up QEMU 
        if: steps.get_image.outputs.digest != '' && matrix.prop[1] != 'amd64' && matrix.prop[1] != '386' 
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes 
 
      - name: Run test for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_test 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: sh 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "install npm..." && 
            export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y npm &&
            echo "test icloudpd..." && 
            npx -y --registry http://172.17.0.1:4873 icloudpd@${{inputs.icloudpd_version}} --help  &&
            touch /work/compatibility/npm.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 
 
      - name: Record failure for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/npm.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
 
      - name: Upload compatibility result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-compatibility-linux-npm-apt
          if-no-files-found: error 
          path: | 
            compatibility/* 

  compatibility_linux_npm_apk:
    name: "NPM on ${{ matrix.image[1] }} on linux/${{ matrix.prop[1] }} platform APK" 
    strategy:  
      fail-fast: false 
      matrix: 
        image:  
          - [ 
            "alpine_3_19", #variant name
            "alpine:3.19", #image
            ] 
          - [ 
            "alpine_3_18", #variant name
            "alpine:3.18", #image
            ] 
          - [ 
            "alpine_3_17", #variant name
            "alpine:3.17", #image
            ] 
          - [ 
            "alpine_3_16", #variant name
            "alpine:3.16", #image
            ] 
          - [ 
            "alpine_3_15", #variant name
            "alpine:3.15", #image
            ] 
          - [ 
            "alpine_3_14", #variant name
            "alpine:3.14", #image
            ] 
          - [ 
            "alpine_3_13", #variant name
            "alpine:3.13", #image
            ] 
        prop:  
          - [ 
            "amd64",  # variant name 
            "amd64",  # platform spec 
            "",  # image prefix 
          ] 
          - [ 
            "386",  # variant name 
            "386",  # platform spec 
            "i386/",  # image prefix 
          ] 
          - [ 
            "arm64",  # variant name 
            "arm64",  # platform spec 
            "",  # image prefix 
          ] 
          # hangs with QEMU https://github.com/nodejs/docker-node/issues/1973
          # - [ 
          #   "arm32v7",  # variant name 
          #   "arm/v7",  # platform spec 
          #   "arm32v7/",  # image prefix 
          # ] 
          # - [ 
          #   "arm32v6",  # variant name 
          #   "arm/v6",  # platform spec 
          #   "arm32v6/",  # image prefix 
          # ] 
          # - [ 
          #   "arm32v5",  # variant name 
          #   "arm/v5",  # platform spec 
          #   "arm32v5/",  # image prefix 
          # ] 
    runs-on: ubuntu-22.04 
    needs: [ build_npm ] 
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Create Config
        run: |
          touch ${{ github.workspace }}/npm_config.yaml
          echo "
          storage: /verdaccio/storage/data
          max_body_size: 1000mb
          packages:
            '**':
              access: \$anonymous
              publish: \$anonymous" > ${{ github.workspace }}/npm_config.yaml
          sudo chown 10001:65533 ${{ github.workspace }}/npm_config.yaml
          cat ${{ github.workspace }}/npm_config.yaml

      - name: Start Registry 
        shell: bash 
        run: docker run -d -p 4873:4873 -e VERDACCIO_PORT=4873 -v ${{ github.workspace }}/npm_config.yaml:/verdaccio/conf/config.yaml:ro verdaccio/verdaccio:5

      - name: Get image 
        id: get_image  
        run: |  
          echo digest=$(docker pull --platform linux/${{ matrix.prop[1] }} ${{ matrix.prop[2] }}${{ matrix.image[1] }} | grep Digest | head -n 1 | cut -d: -f 2-3 | tr -d ' ') >> $GITHUB_OUTPUT 

      - name: Make folder for compatibility 
        if: steps.get_image.outputs.digest != ''  
        run: | 
          mkdir compatibility 
 
      - name: Download artifacts
        if: steps.get_image.outputs.digest != ''  
        uses: actions/download-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-npm
          path: | 
            dist/npm
 
      - name: Setup Node
        if: steps.get_image.outputs.digest != ''  
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'https://localhost:4873'

      - name: Publish NPM
        if: steps.get_image.outputs.digest != ''  
        run: |
          npm publish dist/npm/@icloudpd/linux-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/win32-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/icloudpd --access public --registry http://localhost:4873

      - name: Set up QEMU 
        if: steps.get_image.outputs.digest != '' && matrix.prop[1] != 'amd64' && matrix.prop[1] != '386' 
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes 
 
      - name: Run test for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: steps.get_image.outputs.digest != ''  
        id: run_test 
        uses: addnab/docker-run-action@v3 
        continue-on-error: true 
        with: 
          image: ${{ matrix.prop[2] }}${{ matrix.image[1] }} 
          shell: sh 
          options: -v ${{ github.workspace }}:/work --platform linux/${{ matrix.prop[1] }} 
          run: > 
            echo "install npm..." && 
            apk update && apk add npm &&
            echo "test icloudpd..." && 
            npx -y --registry http://172.17.0.1:4873 icloudpd@${{inputs.icloudpd_version}} --help  &&
            touch /work/compatibility/npm.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.pass 
 
      - name: Record failure for ${{ matrix.prop[2] }}${{ matrix.image[1] }} on ${{ matrix.prop[1] }} 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/npm.${{ matrix.image[0] }}.${{ matrix.prop[0] }}.fail 
 
      - name: Upload compatibility result 
        if: steps.get_image.outputs.digest != ''  
        uses: actions/upload-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-compatibility-linux-npm-apk
          if-no-files-found: error 
          path: | 
            compatibility/* 


  compatibility_macos_npm:
    if: false
    name: "NPM on ${{ matrix.os }} on amd64 platform" 
    strategy:  
      fail-fast: false 
      matrix: 
        os: [ "macos-11" ]
    runs-on: ${{ matrix.os }} 
    needs: [ build_npm ] 
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Setup Node
        if: steps.get_image.outputs.digest != ''  
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'http://localhost:4873'
        env:
          NODE_AUTH_TOKEN: "fake"

      - name: Create Config
        run: |
          touch ${{ github.workspace }}/npm_config.yaml
          mkdir ${{ github.workspace }}/verdaccio
          echo "
          storage: ${{ github.workspace }}/verdaccio
          max_body_size: 1000mb
          packages:
            '**':
              access: \$anonymous
              publish: \$anonymous" > ${{ github.workspace }}/npm_config.yaml
          cat ${{ github.workspace }}/npm_config.yaml

      - name: Start Registry 
        shell: bash 
        run: (npx -y verdaccio@5 --config ${{ github.workspace }}/npm_config.yaml --listen 0.0.0.0:4873 > ${{ github.workspace }}/verdaccio.log) &

      - name: Make folder for compatibility 
        run: | 
          mkdir compatibility 
 
      - name: Download artifacts
        uses: actions/download-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-npm
          path: | 
            dist/npm

      - name: Test Registry
        run: | 
          echo "ls..."
          ls -la
          echo "ps..."
          ps -ef | grep verdaccio
          echo "log..."
          cat ${{ github.workspace }}/verdaccio.log
          echo "curl..."
          curl -v http://localhost:4873

      - name: Publish NPM
        run: |
          npm publish dist/npm/@icloudpd/linux-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/win32-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/icloudpd --access public --registry http://localhost:4873
        env:
          NODE_AUTH_TOKEN: "fake"

      - name: Run test on ${{ matrix.os }} 
        id: run_test 
        continue-on-error: true 
        run: > 
          npx -y --registry http://localhost:4873 icloudpd@${{inputs.icloudpd_version}} --help  &&
          touch /work/compatibility/npm.${{ matrix.os }}.amd64.pass 
 
      - name: Record failure on ${{ matrix.os }} 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/npm.${{ matrix.os }}.amd64.fail 
 
      - name: Upload compatibility result 
        uses: actions/upload-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-compatibility-macos-npm
          if-no-files-found: error 
          path: | 
            compatibility/* 


  compatibility_windows_npm:
    if: false
    name: "NPM on ${{ matrix.os }} on amd64 platform" 
    strategy:  
      fail-fast: false 
      matrix: 
        os: [ "windows-2019" ]
    runs-on: ${{ matrix.os }} 
    needs: [ build_npm ] 
    defaults: 
      run: 
        shell: bash 
 
    steps: 
 
      - name: Setup Node
        if: steps.get_image.outputs.digest != ''  
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'http://localhost:4873'
        env:
          NODE_AUTH_TOKEN: "fake"

      - name: Create Config
        run: |
          touch ${{ github.workspace }}/npm_config.yaml
          mkdir ${{ github.workspace }}/verdaccio
          echo "
          storage: ${{ github.workspace }}/verdaccio
          max_body_size: 1000mb
          packages:
            '**':
              access: \$anonymous
              publish: \$anonymous" > ${{ github.workspace }}/npm_config.yaml
          cat ${{ github.workspace }}/npm_config.yaml

      - name: Start Registry 
        shell: bash 
        run: (npx -y verdaccio@5 --config ${{ github.workspace }}/npm_config.yaml --listen 0.0.0.0:4873 > ${{ github.workspace }}/verdaccio.log) &

      - name: Make folder for compatibility 
        run: | 
          mkdir compatibility 
 
      - name: Download artifacts
        uses: actions/download-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-npm
          path: | 
            dist/npm

      - name: Test Registry
        run: | 
          echo "ls..."
          ls -la
          echo "ps..."
          ps -ef | grep verdaccio
          echo "log..."
          cat ${{ github.workspace }}/verdaccio.log
          echo "curl..."
          curl -v http://localhost:4873

      - name: Publish NPM
        run: |
          npm publish dist/npm/@icloudpd/linux-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/win32-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-x64 --access public --registry http://localhost:4873
          npm publish dist/npm/@icloudpd/darwin-arm64 --access public --registry http://localhost:4873
          npm publish dist/npm/icloudpd --access public --registry http://localhost:4873
        env:
          NODE_AUTH_TOKEN: "fake"

      - name: Run test on ${{ matrix.os }} 
        id: run_test 
        continue-on-error: true 
        run: > 
          npx -y --registry http://localhost:4873 icloudpd@${{inputs.icloudpd_version}} --help  &&
          touch /work/compatibility/npm.${{ matrix.os }}.amd64.pass 
 
      - name: Record failure on ${{ matrix.os }} 
        if: ${{ steps.run_test.outcome == 'failure' }}  
        run: | 
          touch compatibility/npm.${{ matrix.os }}.amd64.fail 
 
      - name: Upload compatibility result 
        uses: actions/upload-artifact@v3 
        with: 
          name: icloudpd-${{github.sha}}-compatibility-macos-npm
          if-no-files-found: error 
          path: | 
            compatibility/* 


  compatibility_report:
    name: "Build Compatibility Report"

    runs-on: ubuntu-22.04
    needs: 
      - compatibility_nonlinux_pip
      - compatibility_linux_pip_apt
      - compatibility_linux_pip_apk
      - compatibility_linux_bin
      - compatibility_macos_bin
      - compatibility_windows_bin
      - compatibility_docker
      - compatibility_linux_npm_apt
      - compatibility_linux_npm_apk
      # - compatibility_macos_npm
      # - compatibility_windows_npm
    defaults:
      run:
        shell: bash

    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
    
      - name: Make folder for artifacts
        run: |
          mkdir dist

      - name: Download compatibility results (nonlinux-pip)
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-compatibility-nonlinux-pip
          path: |
            compatibility

      - name: Download compatibility results (linux-pip-apt)
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-compatibility-linux-pip-apt
          path: |
            compatibility

      - name: Download compatibility results (linux-pip-apk)
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-compatibility-linux-pip-apk
          path: |
            compatibility

      - name: Download compatibility results (linux-bin)
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-compatibility-linux-bin
          path: |
            compatibility

      - name: Download compatibility results (macos-bin)
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-compatibility-macos-bin
          path: |
            compatibility

      - name: Download compatibility results (windows-bin)
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-compatibility-windows-bin
          path: |
            compatibility

      - name: Download compatibility results (docker)
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-compatibility-docker
          path: |
            compatibility

      - name: Download compatibility results (linux-npm-apt)
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-compatibility-linux-npm-apt
          path: |
            compatibility

      - name: Download compatibility results (linux-npm-apk)
        uses: actions/download-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-compatibility-linux-npm-apk
          path: |
            compatibility


      - name: Compile compatibility Report
        run: |
          echo "debugging report..."
          scripts/compile_compatibility compatibility
          echo "save report..."
          scripts/compile_compatibility compatibility > dist/compatibility-${{inputs.icloudpd_version}}.md

      - name: Upload compatibility report
        uses: actions/upload-artifact@v3
        with:
          name: icloudpd-${{github.sha}}-compatibility
          if-no-files-found: error
          path: |
            dist/*
